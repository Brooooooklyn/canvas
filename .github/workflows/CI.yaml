name: CI

env:
  DEBUG: 'napi:*'
  APP_NAME: 'skia'
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
            setup: brew install nasm
            build: |
              rustc --print target-cpus
              yarn build
              strip -x skia.darwin-x64.node
            downloadTarget: ''
          - host: windows-latest
            build: yarn build
            target: 'x86_64-pc-windows-msvc'
            downloadTarget: ''
          - host: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
            downloadTarget: ''
            docker: |
              docker pull ghcr.io/brooooooklyn/canvas/ubuntu-builder:focal
              docker tag ghcr.io/brooooooklyn/canvas/ubuntu-builder:focal builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder sh -c "yarn build && strip skia.linux-x64-gnu.node"
          - host: ubuntu-latest
            downloadTarget: 'x86_64-unknown-linux-musl'
            target: 'x86_64-unknown-linux-musl'
            docker: |
              docker pull ghcr.io/brooooooklyn/canvas/musl-builder:lts
              docker tag ghcr.io/brooooooklyn/canvas/musl-builder:lts builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder sh -c "yarn build && strip skia.linux-x64-musl.node"
          - host: macos-latest
            downloadTarget: 'aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x skia.darwin-arm64.node
          - host: ubuntu-18.04
            downloadTarget: 'aarch64-unknown-linux-gnu'
            target: 'aarch64-unknown-linux-gnu'
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu  -y
            build: |
              yarn build --target aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip skia.linux-arm64-gnu.node
          - host: ubuntu-latest
            target: 'aarch64-unknown-linux-musl'
            downloadTarget: 'aarch64-unknown-linux-musl'
            docker: |
              docker pull ghcr.io/brooooooklyn/canvas/musl-builder:lts
              docker tag ghcr.io/brooooooklyn/canvas/musl-builder:lts builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/canvas -w /canvas builder sh -c "rustup toolchain install $(cat ./rust-toolchain) && rustup target add aarch64-unknown-linux-musl && yarn build --target aarch64-unknown-linux-musl && /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip skia.linux-arm64-musl.node"
          - host: ubuntu-18.04
            target: 'armv7-unknown-linux-gnueabihf'
            downloadTarget: 'armv7-unknown-linux-gnueabihf'
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              yarn build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip skia.linux-arm-gnueabihf.node
          - host: ubuntu-latest
            target: 'aarch64-linux-android'
            downloadTarget: 'aarch64-linux-android'
            build: |
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              export CC="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              export CXX="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++"
              export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
              export PATH="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"
              touch /usr/local/lib/android/sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/12.0.9/lib/linux/aarch64/libgcc.a
              chmod 777 /usr/local/lib/android/sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/12.0.9/lib/linux/aarch64/libgcc.a
              echo "INPUT(-lunwind)" > /usr/local/lib/android/sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/12.0.9/lib/linux/aarch64/libgcc.a
              yarn build --target aarch64-linux-android
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip skia.android-arm64.node

    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'yarn'

      - name: Set env
        if: matrix.settings.host == 'windows-latest'
        run: echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_PATH
        shell: bash

      - name: Setup nasm
        uses: ilammy/setup-nasm@v1
        if: matrix.settings.host == 'windows-latest'

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-cache

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ matrix.settings.target }}-yarn-cache-node-16

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build

      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
        if: ${{ matrix.settings.docker }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}

      - name: Download skia binary
        run: node ./scripts/release-skia-binary.js --download --target=${{ matrix.settings.downloadTarget }}

      - name: 'Build'
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
          - host: windows-latest
            target: 'x86_64-pc-windows-msvc'
        node: ['14', '16', '18']
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ matrix.settings.target }}-yarn-cache-node-${{ matrix.node }}

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: Download icudtl.dat
        if: matrix.settings.host == 'windows-latest'
        run: node ./scripts/release-skia-binary.js --download-icu

      - name: Test bindings
        run: yarn test

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-${{ matrix.settings.target }}-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['14', '16', '18']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: 'yarn'

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: linux-x64-gnu-yarn-cache-node-${{ matrix.node }}

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v $(pwd):/canvas -w /canvas node:${{ matrix.node }}-slim yarn test

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-x86_64-unknown-linux-gnu-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['14', '16', '18']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: 'yarn'

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: linux-x64-musl-yarn-cache-node-${{ matrix.node }}

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v $(pwd):/canvas -w /canvas node:${{ matrix.node }}-alpine sh -c "yarn install --immutable --mode=skip-build && yarn test"

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-x86_64-unknown-linux-musl-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['14', '16', '18']
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v3

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: linux-aarch64-gnu-yarn-cache-node-${{ matrix.node }}

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:aarch64-${{ matrix.node }}
          options: -v ${{ github.workspace }}:/skia -w /skia
          run: |
            set -e && \
            yarn install --immutable --mode=skip-build && \
            yarn test && \
            ls -la

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-aarch64-unknown-linux-gnu-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build

    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v3

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: linux-aarch64-musl-yarn-cache-node-${{ matrix.node }}

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: multiarch/alpine:aarch64-latest-stable
          options: -v ${{ github.workspace }}:/skia -w /skia
          run: |
            set -e
            apk add nodejs npm yarn
            yarn install --immutable --mode=skip-build
            yarn test

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-aarch64-unknown-linux-musl-${{ matrix.node }}
          path: __test__/failure/**

  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ['14', '16', '18']
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v3

      - name: Download Apple Emoji font
        uses: robinraju/release-downloader@v1
        with:
          repository: 'PoomSmart/EmojiLibrary'
          latest: true
          fileName: AppleColorEmoji@2x.ttf
          token: ${{ secrets.GITHUB_TOKEN }}
          out-file-path: __test__/fonts/

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: linux-arm-gnueabihf-yarn-cache-node-${{ matrix.node }}

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:armhf-${{ matrix.node }}
          options: -v ${{ github.workspace }}:/skia -w /skia
          run: |
            set -e && \
            yarn install --immutable --mode=skip-build && \
            yarn test && \
            ls -la

      - name: Test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failure-images-armv7-unknown-linux-gnueabihf-${{ matrix.node }}
          path: __test__/failure/**

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - test-macOS-windows-binding

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'yarn'

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: publish-yarn-cache-node-16

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: Download ICU for Windows
        run: node ./scripts/release-skia-binary.js --download-icu

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
