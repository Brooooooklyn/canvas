import test from 'ava'

import { FillType, Path2D, PathOp, StrokeCap, StrokeJoin, createCanvas, SvgExportFlag } from '../index'

const AARCH64_NOT_MUSL = (function () {
  // @ts-expect-error
  const { header } = process.report?.getReport?.() ?? {}
  const isGnuLinux = Boolean(header?.glibcVersionRuntime)
  return process.arch === 'arm64' && ((process.platform === 'linux' && isGnuLinux) || process.platform === 'darwin')
})()

test('should be able to call toSVGString', (t) => {
  const path = new Path2D()
  path.rect(0, 0, 100, 100)
  t.is(path.toSVGString(), 'M0 0L100 0L100 100L0 100L0 0Z')
})

test('should be able to create mountain via op', (t) => {
  const pathOne = new Path2D()
  const pathTwo = new Path2D()
  pathOne.moveTo(0, 20)
  pathOne.lineTo(10, 10)
  pathOne.lineTo(20, 20)
  pathOne.closePath()
  pathTwo.moveTo(10, 20)
  pathTwo.lineTo(20, 10)
  pathTwo.lineTo(30, 20)
  pathTwo.closePath()
  t.is(pathOne.op(pathTwo, PathOp.Union).toSVGString(), 'M10 10L0 20L30 20L20 10L15 15L10 10Z')
})

test('Union boolean operation', (t) => {
  const pathOne = new Path2D(
    'M8 50H92C96.4183 50 100 53.5817 100 58V142C100 146.418 96.4183 150 92 150H8C3.58172 150 0 146.418 0 142V58C0 53.5817 3.58172 50 8 50Z',
  )
  const pathTwo = new Path2D(
    'M58 0H142C146.418 0 150 3.58172 150 8V92C150 96.4183 146.418 100 142 100H58C53.5817 100 50 96.4183 50 92V8C50 3.58172 53.5817 0 58 0Z',
  )

  t.is(
    pathOne.op(pathTwo, PathOp.Union).toSVGString(),
    'M142 0L58 0C53.5817 0 50 3.58172 50 8L50 50L8 50C3.58172 50 0 53.5817 0 58L0 142C0 146.418 3.58172 150 8 150L92 150C96.4183 150 100 146.418 100 142L100 100L142 100C146.418 100 150 96.4183 150 92L150 8C150 3.58172 146.418 0 142 0Z',
  )
})

test('Difference boolean operation', (t) => {
  const pathOne = new Path2D(
    'M8 50H92C96.4183 50 100 53.5817 100 58V142C100 146.418 96.4183 150 92 150H8C3.58172 150 0 146.418 0 142V58C0 53.5817 3.58172 50 8 50Z',
  )
  const pathTwo = new Path2D(
    'M58 0H142C146.418 0 150 3.58172 150 8V92C150 96.4183 146.418 100 142 100H58C53.5817 100 50 96.4183 50 92V8C50 3.58172 53.5817 0 58 0Z',
  )

  t.is(
    pathOne.op(pathTwo, PathOp.Difference).toSVGString(),
    'M50 50L8 50C3.58172 50 0 53.5817 0 58L0 142C0 146.418 3.58172 150 8 150L92 150C96.4183 150 100 146.418 100 142L100 100L58 100C53.5817 100 50 96.4183 50 92L50 50Z',
  )
})

test('ReverseDifference boolean operation', (t) => {
  const pathOne = new Path2D(
    'M8 50H92C96.4183 50 100 53.5817 100 58V142C100 146.418 96.4183 150 92 150H8C3.58172 150 0 146.418 0 142V58C0 53.5817 3.58172 50 8 50Z',
  )
  const pathTwo = new Path2D(
    'M58 0H142C146.418 0 150 3.58172 150 8V92C150 96.4183 146.418 100 142 100H58C53.5817 100 50 96.4183 50 92V8C50 3.58172 53.5817 0 58 0Z',
  )

  t.is(
    pathOne.op(pathTwo, PathOp.ReverseDifference).toSVGString(),
    'M142 0L58 0C53.5817 0 50 3.58172 50 8L50 50L92 50C96.4183 50 100 53.5817 100 58L100 100L142 100C146.418 100 150 96.4183 150 92L150 8C150 3.58172 146.418 0 142 0Z',
  )
})

test('Intersect boolean operation', (t) => {
  const pathOne = new Path2D(
    'M8 50H92C96.4183 50 100 53.5817 100 58V142C100 146.418 96.4183 150 92 150H8C3.58172 150 0 146.418 0 142V58C0 53.5817 3.58172 50 8 50Z',
  )
  const pathTwo = new Path2D(
    'M58 0H142C146.418 0 150 3.58172 150 8V92C150 96.4183 146.418 100 142 100H58C53.5817 100 50 96.4183 50 92V8C50 3.58172 53.5817 0 58 0Z',
  )

  t.is(
    pathOne.op(pathTwo, PathOp.Intersect).toSVGString(),
    'M100 100L58 100C53.5817 100 50 96.4183 50 92L50 50L92 50C96.4183 50 100 53.5817 100 58L100 100Z',
  )
})

test('Xor boolean operation', (t) => {
  const pathOne = new Path2D(
    'M8 50H92C96.4183 50 100 53.5817 100 58V142C100 146.418 96.4183 150 92 150H8C3.58172 150 0 146.418 0 142V58C0 53.5817 3.58172 50 8 50Z',
  )
  const pathTwo = new Path2D(
    'M58 0H142C146.418 0 150 3.58172 150 8V92C150 96.4183 146.418 100 142 100H58C53.5817 100 50 96.4183 50 92V8C50 3.58172 53.5817 0 58 0Z',
  )

  t.is(
    pathOne.op(pathTwo, PathOp.Xor).toSVGString(),
    'M142 0L58 0C53.5817 0 50 3.58172 50 8L50 50L8 50C3.58172 50 0 53.5817 0 58L0 142C0 146.418 3.58172 150 8 150L92 150C96.4183 150 100 146.418 100 142L100 100L142 100C146.418 100 150 96.4183 150 92L150 8C150 3.58172 146.418 0 142 0ZM100 100L100 58C100 53.5817 96.4183 50 92 50L50 50L50 92C50 96.4183 53.5817 100 58 100L100 100Z',
  )
})

test('FillType must be Winding after conversion by AsWinding()', (t) => {
  const path = new Path2D()
  path.rect(1, 2, 3, 4)
  path.setFillType(FillType.EvenOdd)
  t.is(path.asWinding().getFillType(), FillType.Winding)
})

test('getFillTypeString()', (t) => {
  const path = new Path2D()
  path.rect(1, 2, 3, 4)
  t.is(path.getFillTypeString(), 'nonzero')
})

test('getFillTypeString() and setFillType()', (t) => {
  const path = new Path2D()
  path.rect(1, 2, 3, 4)
  path.setFillType(FillType.EvenOdd)
  t.is(path.getFillTypeString(), 'evenodd')
})

test('Use .asWinding() to convert filltype evenodd to nonzero', (t) => {
  const evenOddPath = new Path2D(
    'M24.2979 13.6364H129.394V40.9091H24.2979L14.6278 27.2727L24.2979 13.6364ZM21.9592 0C19.0246 0 16.2716 1.42436 14.571 3.82251L1.67756 22.0043C-0.559186 25.1585 -0.559186 29.387 1.67756 32.5411L14.571 50.7227C16.2716 53.1209 19.0246 54.5455 21.9592 54.5455H70.4673V68.1818H16.073C11.0661 68.1818 7.00728 72.2518 7.00728 77.2727V113.636C7.00728 118.657 11.0661 122.727 16.073 122.727H70.4673V150H84.0658V122.727H128.041C130.975 122.727 133.729 121.303 135.429 118.905L148.323 100.723C150.559 97.5686 150.559 93.3405 148.323 90.1864L135.429 72.0045C133.729 69.6064 130.975 68.1818 128.041 68.1818H84.0658V54.5455H133.927C138.934 54.5455 142.993 50.4755 142.993 45.4545V9.09091C142.993 4.07014 138.934 0 133.927 0H21.9592ZM125.702 109.091H20.6058V81.8182H125.702L135.372 95.4545L125.702 109.091Z',
  )
  const nonzeroPath =
    'M24.2979 13.6364L129.394 13.6364L129.394 40.9091L24.2979 40.9091L14.6278 27.2727L24.2979 13.6364ZM21.9592 0C19.0246 0 16.2716 1.42436 14.571 3.82251L1.67756 22.0043C-0.559186 25.1585 -0.559186 29.387 1.67756 32.5411L14.571 50.7227C16.2716 53.1209 19.0246 54.5455 21.9592 54.5455L70.4673 54.5455L70.4673 68.1818L16.073 68.1818C11.0661 68.1818 7.00728 72.2518 7.00728 77.2727L7.00728 113.636C7.00728 118.657 11.0661 122.727 16.073 122.727L70.4673 122.727L70.4673 150L84.0658 150L84.0658 122.727L128.041 122.727C130.975 122.727 133.729 121.303 135.429 118.905L148.323 100.723C150.559 97.5686 150.559 93.3405 148.323 90.1864L135.429 72.0045C133.729 69.6064 130.975 68.1818 128.041 68.1818L84.0658 68.1818L84.0658 54.5455L133.927 54.5455C138.934 54.5455 142.993 50.4755 142.993 45.4545L142.993 9.09091C142.993 4.07014 138.934 0 133.927 0L21.9592 0ZM125.702 109.091L20.6058 109.091L20.6058 81.8182L125.702 81.8182L135.372 95.4545L125.702 109.091Z'

  evenOddPath.setFillType(FillType.EvenOdd) // The FillType of the original path is evenodd

  t.is(evenOddPath.asWinding().toSVGString(), nonzeroPath)
})

test('Use .asWinding() and .simplify() to convert cubic Bezier curve to quadratic', (t) => {
  const path = new Path2D(
    'M0 10C0 4.47715 4.47715 0 10 0H90C95.5229 0 100 4.47715 100 10C100 15.5228 95.5229 20 90 20H10C4.47715 20 0 15.5228 0 10Z',
  )
  // Quadratic bezier curve
  const quadraticPath =
    'M0 10C0 4.47715 4.47715 0 10 0L90 0C95.5229 0 100 4.47715 100 10C100 15.5228 95.5229 20 90 20L10 20C4.47715 20 0 15.5228 0 10Z'

  t.is(path.asWinding().simplify().toSVGString(), quadraticPath)
})

test('Use .simplify() to remove overlapping paths', (t) => {
  const path = new Path2D(
    'M2.933,89.89 L89.005,3.818 Q90.412,2.411 92.249,1.65 Q94.087,0.889 96.076,0.889 Q98.065,0.889 99.903,1.65 Q101.741,2.411 103.147,3.818 L189.22,89.89 Q190.626,91.296 191.387,93.134 Q192.148,94.972 192.148,96.961 Q192.148,98.95 191.387,100.788 Q190.626,102.625 189.219,104.032 Q187.813,105.439 185.975,106.2 Q184.138,106.961 182.148,106.961 Q180.159,106.961 178.322,106.2 Q176.484,105.439 175.077,104.032 L89.005,17.96 L96.076,10.889 L103.147,17.96 L17.075,104.032 Q15.668,105.439 13.831,106.2 Q11.993,106.961 10.004,106.961 Q8.015,106.961 6.177,106.2 Q4.339,105.439 2.933,104.032 Q1.526,102.625 0.765,100.788 Q0.004,98.95 0.004,96.961 Q0.004,94.972 0.765,93.134 Q1.526,91.296 2.933,89.89 Z',
  )

  t.is(
    path.simplify().toSVGString(),
    'M89.005 3.818L2.933 89.89Q1.526 91.296 0.765 93.134Q0.004 94.972 0.004 96.961Q0.004 98.95 0.765 100.788Q1.526 102.625 2.933 104.032Q4.339 105.439 6.177 106.2Q8.015 106.961 10.004 106.961Q11.993 106.961 13.831 106.2Q15.668 105.439 17.075 104.032L96.076 25.031L175.077 104.032Q176.484 105.439 178.322 106.2Q180.159 106.961 182.148 106.961Q184.138 106.961 185.975 106.2Q187.813 105.439 189.219 104.032Q190.626 102.625 191.387 100.788Q192.148 98.95 192.148 96.961Q192.148 94.972 191.387 93.134Q190.626 91.296 189.22 89.89L103.147 3.818Q101.741 2.411 99.903 1.65Q98.065 0.889 96.076 0.889Q94.087 0.889 92.249 1.65Q90.412 2.411 89.005 3.818Z',
  )
})

test('Convert fill-type to nonzero and cubic Bezier curve to quadratic', (t) => {
  const pathTriangle = new Path2D('M70 0L0.717957 120H139.282L70 0ZM70 30L26.6987 105H113.301L70 30Z')
  // Quadratic bezier curve
  const quadraticPath = 'M0.717957 120L70 0L139.282 120L0.717957 120ZM113.301 105L70 30L26.6987 105L113.301 105Z'
  pathTriangle.setFillType(FillType.EvenOdd)

  t.is(pathTriangle.asWinding().simplify().toSVGString(), quadraticPath)
})

test('Stroke', (t) => {
  const box = new Path2D()
  box.rect(0, 0, 100, 100)
  // Shrink effect, in which we subtract away from the original
  const simplified = new Path2D(box).simplify() // sometimes required for complicated paths
  const shrink = new Path2D(box).stroke({ width: 15, cap: StrokeCap.Butt }).op(simplified, PathOp.ReverseDifference)
  t.is(shrink.toSVGString(), 'M7.5 92.5L7.5 7.5L92.5 7.5L92.5 92.5L7.5 92.5Z')
})

test('Convert stroke to path', (t) => {
  const path = new Path2D(
    'M32.9641 7L53.3157 42.25C54.8553 44.9167 52.9308 48.25 49.8516 48.25H9.14841C6.0692 48.25 4.1447 44.9167 5.6843 42.25L26.0359 7C27.5755 4.33333 31.4245 4.33333 32.9641 7Z',
  )
  path.stroke({ width: 10, miterLimit: 1 }).simplify().asWinding()

  const expected = AARCH64_NOT_MUSL
    ? `M57.6458 39.75L37.2942 4.5Q34.6962 -2.38419e-06 29.5 -2.38419e-06Q24.3038 -2.89876e-06 21.7058 4.5L1.35417 39.75Q-1.2439 44.25 1.35418 48.75Q3.95226 53.25 9.14841 53.25L49.8516 53.25Q55.0478 53.25 57.6458 48.75Q60.2439 44.25 57.6458 39.75ZM29.5 11L48.1195 43.25L10.8805 43.25L29.5 11Z`
    : `M57.6458 39.75L37.2942 4.5Q34.6962 -2.38419e-06 29.5 -2.38419e-06Q24.3038 -2.90573e-06 21.7058 4.5L1.35417 39.75Q-1.2439 44.25 1.35418 48.75Q3.95226 53.25 9.14841 53.25L49.8516 53.25Q55.0478 53.25 57.6458 48.75Q60.2439 44.25 57.6458 39.75ZM29.5 11L48.1195 43.25L10.8805 43.25L29.5 11Z`

  t.is(path.toSVGString(), expected)
})

test('Convert stroke to path 2', (t) => {
  const path = new Path2D('M4 23.5L22.5 5L41 23.5')
  path.stroke({ width: 10, join: StrokeJoin.Round, miterLimit: 1 }).simplify()

  const svg = `<svg width="45" height="28" viewBox="0 0 45 28"><path fill="pink" d="${path.toSVGString()}"></path></svg>`
  const expected = AARCH64_NOT_MUSL
    ? `<svg width="45" height="28" viewBox="0 0 45 28"><path fill="pink" d="M18.9645 1.46447L0.464466 19.9645L7.53553 27.0355L22.5 12.0711L37.4645 27.0355L44.5355 19.9645L26.0355 1.46447Q25.8618 1.29078 25.672 1.13495Q25.4821 0.979119 25.2778 0.842652Q25.0736 0.706185 24.857 0.590394Q24.6404 0.474603 24.4134 0.380602Q24.1865 0.286602 23.9514 0.215298Q23.7164 0.143994 23.4754 0.0960736Q23.2345 0.0481527 22.9901 0.0240764Q22.7456 0 22.5 0Q22.2544 0 22.0099 0.0240764Q21.7655 0.0481527 21.5245 0.0960736Q21.2836 0.143994 21.0486 0.215298Q20.8135 0.286602 20.5866 0.380602Q20.3596 0.474603 20.143 0.590394Q19.9264 0.706185 19.7221 0.842652Q19.5179 0.979119 19.328 1.13495Q19.1382 1.29078 18.9645 1.46447Z"></path></svg>`
    : `<svg width="45" height="28" viewBox="0 0 45 28"><path fill="pink" d="M18.9645 1.46447L0.464466 19.9645L7.53553 27.0355L22.5 12.0711L37.4645 27.0355L44.5355 19.9645L26.0355 1.46447Q25.9487 1.37767 25.8578 1.29524Q25.7668 1.21282 25.672 1.13495Q25.5771 1.05708 25.4785 0.983962Q25.3799 0.910844 25.2778 0.842652Q25.1758 0.774459 25.0705 0.711357Q24.9652 0.648254 24.857 0.590394Q24.7487 0.532533 24.6378 0.480054Q24.5268 0.427574 24.4134 0.380602Q24.3 0.333631 24.1844 0.29228Q24.0689 0.250929 23.9514 0.215298Q23.834 0.179668 23.7149 0.149844Q23.5958 0.12002 23.4755 0.0960736Q23.3551 0.0721276 23.2337 0.0541174Q23.1122 0.0361073 22.9901 0.0240764Q22.8679 0.0120454 22.7453 0.00602272Q22.6227 0 22.5 0Q22.3773 0 22.2547 0.00602272Q22.1321 0.0120454 22.0099 0.0240764Q21.8878 0.0361073 21.7663 0.0541174Q21.6449 0.0721276 21.5245 0.0960736Q21.4042 0.12002 21.2851 0.149844Q21.166 0.179668 21.0486 0.215298Q20.9311 0.250929 20.8155 0.29228Q20.7 0.333631 20.5866 0.380602Q20.4732 0.427574 20.3622 0.480054Q20.2513 0.532533 20.143 0.590394Q20.0348 0.648254 19.9295 0.711357Q19.8242 0.774459 19.7221 0.842652Q19.6201 0.910844 19.5215 0.983962Q19.4229 1.05708 19.328 1.13495Q19.2332 1.21282 19.1422 1.29524Q19.0513 1.37767 18.9645 1.46447Z"></path></svg>`
  t.is(svg, expected)
})

// 直角
test('StrokeJoin.Miter', (t) => {
  const box = new Path2D()
  box.rect(0, 0, 100, 100)
  box.stroke({ width: 20, join: StrokeJoin.Miter })

  t.is(box.toSVGString(), 'M-10 -10L110 -10L110 110L-10 110L-10 -10ZM10 10L10 90L90 90L90 10L10 10Z')
})

// 45度斜角
test('StrokeJoin.Bevel', (t) => {
  const box = new Path2D()
  box.rect(0, 0, 100, 100)
  box.stroke({ width: 20, join: StrokeJoin.Bevel })

  t.is(
    box.toSVGString(),
    'M0 -10L100 -10L110 0L110 100L100 110L0 110L-10 100L-10 0L0 -10ZM10 10L10 90L90 90L90 10L10 10Z',
  )
})

// 圆角
test('StrokeJoin.Round', (t) => {
  const box = new Path2D()
  box.rect(0, 0, 100, 100)
  box.stroke({ width: 20, join: StrokeJoin.Round })

  t.is(
    box.toSVGString(),
    'M-10 100L-10 0Q-10 -0.245486 -9.98795 -0.490677Q-9.97591 -0.735867 -9.95185 -0.980171Q-9.92778 -1.22448 -9.89176 -1.4673Q-9.85574 -1.71013 -9.80785 -1.9509Q-9.75996 -2.19167 -9.70031 -2.4298Q-9.64066 -2.66793 -9.5694 -2.90285Q-9.49814 -3.13776 -9.41544 -3.3689Q-9.33274 -3.60003 -9.23879 -3.82683Q-9.14485 -4.05363 -9.03989 -4.27555Q-8.93493 -4.49747 -8.81921 -4.71397Q-8.70349 -4.93047 -8.57729 -5.14103Q-8.45108 -5.35159 -8.31469 -5.5557Q-8.17831 -5.75982 -8.03207 -5.95699Q-7.88584 -6.15417 -7.7301 -6.34393Q-7.57437 -6.5337 -7.40951 -6.71559Q-7.24465 -6.89748 -7.07107 -7.07107Q-6.89748 -7.24465 -6.71559 -7.40951Q-6.5337 -7.57437 -6.34393 -7.7301Q-6.15417 -7.88584 -5.95699 -8.03207Q-5.75982 -8.17831 -5.5557 -8.3147Q-5.35159 -8.45108 -5.14103 -8.57729Q-4.93047 -8.70349 -4.71397 -8.81921Q-4.49747 -8.93493 -4.27555 -9.03989Q-4.05363 -9.14485 -3.82683 -9.23879Q-3.60003 -9.33274 -3.3689 -9.41544Q-3.13776 -9.49814 -2.90285 -9.5694Q-2.66793 -9.64066 -2.4298 -9.70031Q-2.19167 -9.75996 -1.9509 -9.80785Q-1.71013 -9.85574 -1.4673 -9.89176Q-1.22448 -9.92778 -0.980171 -9.95185Q-0.735867 -9.97591 -0.490677 -9.98795Q-0.245486 -10 0 -10L100 -10Q100.245 -10 100.491 -9.98795Q100.736 -9.97591 100.98 -9.95185Q101.224 -9.92778 101.467 -9.89176Q101.71 -9.85574 101.951 -9.80785Q102.192 -9.75996 102.43 -9.70031Q102.668 -9.64066 102.903 -9.5694Q103.138 -9.49814 103.369 -9.41544Q103.6 -9.33274 103.827 -9.23879Q104.054 -9.14485 104.276 -9.03989Q104.497 -8.93493 104.714 -8.81921Q104.93 -8.70349 105.141 -8.57729Q105.352 -8.45108 105.556 -8.31469Q105.76 -8.17831 105.957 -8.03207Q106.154 -7.88584 106.344 -7.7301Q106.534 -7.57437 106.716 -7.40951Q106.897 -7.24465 107.071 -7.07107Q107.245 -6.89748 107.41 -6.71559Q107.574 -6.5337 107.73 -6.34393Q107.886 -6.15417 108.032 -5.95699Q108.178 -5.75982 108.315 -5.5557Q108.451 -5.35159 108.577 -5.14103Q108.703 -4.93047 108.819 -4.71397Q108.935 -4.49747 109.04 -4.27555Q109.145 -4.05363 109.239 -3.82683Q109.333 -3.60003 109.415 -3.3689Q109.498 -3.13776 109.569 -2.90285Q109.641 -2.66793 109.7 -2.4298Q109.76 -2.19167 109.808 -1.9509Q109.856 -1.71013 109.892 -1.4673Q109.928 -1.22448 109.952 -0.980171Q109.976 -0.735867 109.988 -0.490677Q110 -0.245486 110 0L110 100Q110 100.245 109.988 100.491Q109.976 100.736 109.952 100.98Q109.928 101.224 109.892 101.467Q109.856 101.71 109.808 101.951Q109.76 102.192 109.7 102.43Q109.641 102.668 109.569 102.903Q109.498 103.138 109.415 103.369Q109.333 103.6 109.239 103.827Q109.145 104.054 109.04 104.276Q108.935 104.497 108.819 104.714Q108.703 104.93 108.577 105.141Q108.451 105.352 108.315 105.556Q108.178 105.76 108.032 105.957Q107.886 106.154 107.73 106.344Q107.574 106.534 107.41 106.716Q107.245 106.897 107.071 107.071Q106.897 107.245 106.716 107.41Q106.534 107.574 106.344 107.73Q106.154 107.886 105.957 108.032Q105.76 108.178 105.556 108.315Q105.352 108.451 105.141 108.577Q104.93 108.703 104.714 108.819Q104.497 108.935 104.276 109.04Q104.054 109.145 103.827 109.239Q103.6 109.333 103.369 109.415Q103.138 109.498 102.903 109.569Q102.668 109.641 102.43 109.7Q102.192 109.76 101.951 109.808Q101.71 109.856 101.467 109.892Q101.224 109.928 100.98 109.952Q100.736 109.976 100.491 109.988Q100.245 110 100 110L0 110Q-0.245486 110 -0.490677 109.988Q-0.735867 109.976 -0.980171 109.952Q-1.22448 109.928 -1.4673 109.892Q-1.71013 109.856 -1.9509 109.808Q-2.19167 109.76 -2.4298 109.7Q-2.66793 109.641 -2.90285 109.569Q-3.13776 109.498 -3.3689 109.415Q-3.60003 109.333 -3.82683 109.239Q-4.05363 109.145 -4.27555 109.04Q-4.49747 108.935 -4.71397 108.819Q-4.93047 108.703 -5.14103 108.577Q-5.35159 108.451 -5.5557 108.315Q-5.75982 108.178 -5.95699 108.032Q-6.15417 107.886 -6.34393 107.73Q-6.5337 107.574 -6.71559 107.41Q-6.89748 107.245 -7.07107 107.071Q-7.24465 106.897 -7.40951 106.716Q-7.57437 106.534 -7.7301 106.344Q-7.88584 106.154 -8.03207 105.957Q-8.17831 105.76 -8.3147 105.556Q-8.45108 105.352 -8.57729 105.141Q-8.70349 104.93 -8.81921 104.714Q-8.93493 104.497 -9.03989 104.276Q-9.14485 104.054 -9.23879 103.827Q-9.33274 103.6 -9.41544 103.369Q-9.49814 103.138 -9.5694 102.903Q-9.64066 102.668 -9.70031 102.43Q-9.75996 102.192 -9.80785 101.951Q-9.85574 101.71 -9.89176 101.467Q-9.92778 101.224 -9.95185 100.98Q-9.97591 100.736 -9.98795 100.491Q-10 100.245 -10 100ZM10 10L10 90L90 90L90 10L10 10Z',
  )
})

test('computeTightBounds', (t) => {
  const p = new Path2D()
  t.deepEqual(p.computeTightBounds(), [0, 0, 0, 0])
  p.arc(50, 45, 25, 0, 2 * Math.PI)
  t.deepEqual(p.computeTightBounds(), [25, 20, 75, 70])
})

test('Transform', (t) => {
  const p = new Path2D()
  p.transform({ a: 1, b: 0.2, c: 0.8, d: 1, e: 0, f: 0 })
  p.rect(0, 0, 100, 100)
  p.transform({ a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 })
  p.rect(220, 0, 100, 100)
  t.is(p.toSVGString(), 'M0 0L100 0L100 100L0 100L0 0ZM220 0L320 0L320 100L220 100L220 0Z')
})

test('trim', (t) => {
  const box = new Path2D()
  box.rect(0, 0, 100, 100)
  // box is now the 3 segments that look like a U.
  // (the top segment has been removed).
  box.trim(0.25, 1).stroke({ width: 10 }).simplify()

  const svg = `<svg width="100" height="100" viewBox="0 0 100 100"><path fill="blue" d="${box.toSVGString()}"></path></svg>`

  t.snapshot(svg)
})

test('dash', (t) => {
  const phased = drawStar().dash(10, 3, 0.2)
  const c = createCanvas(500, 500, SvgExportFlag.NoPrettyXML)
  const ctx = c.getContext('2d')
  ctx.moveTo(100, 100)
  ctx.strokeStyle = 'black'
  ctx.stroke(phased)
  t.is(
    c.getContent().toString('utf8'),
    AARCH64_NOT_MUSL
      ? `<?xml version="1.0" encoding="utf-8" ?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500" height="500"><path fill="none" stroke="black" stroke-width="1" stroke-miterlimit="10" d="M252.721 130.848L242.972 133.073M240.047 133.741L230.298 135.966M227.373 136.634L217.624 138.859M214.699 139.527L204.949 141.752M202.025 142.419L192.275 144.645M189.351 145.312L179.601 147.537M176.677 148.205L166.927 150.43M164.002 151.098L154.253 153.323M151.328 153.99L141.579 156.216M138.654 156.883L128.905 159.108M125.98 159.776L116.231 162.001M113.306 162.669L103.557 164.894M100.632 165.562L90.8829 167.787M87.9581 168.454L78.2088 170.68M75.284 171.347L65.5348 173.572M62.61 174.24L52.8607 176.465M49.9359 177.133L46.2084 177.983L51.0374 174.132M53.3829 172.262L61.2013 166.027M63.5468 164.157L71.3651 157.922M73.7105 156.051L81.5289 149.816M83.8744 147.946L91.6927 141.711M94.0382 139.84L101.856 133.606M104.202 131.735L112.02 125.5M114.366 123.63L122.184 117.395M124.53 115.524L132.348 109.289M134.693 107.419L142.512 101.184M144.857 99.3136L152.676 93.0787M155.021 91.2082L162.839 84.9733M165.185 83.1029L173.003 76.868M175.349 74.9975L183.167 68.7626M185.512 66.8921L193.331 60.6572M195.676 58.7868L203.495 52.5519M205.84 50.6814L213.658 44.4465M216.004 42.576L221.826 37.933L220.718 40.2334M219.417 42.9363L215.078 51.946M213.776 54.6489L209.437 63.6586M208.136 66.3615L203.797 75.3711M202.495 78.0741L198.156 87.0837M196.855 89.7867L192.516 98.7963M191.214 101.499L186.875 110.509M185.574 113.212L181.235 122.222M179.933 124.924L175.594 133.934M174.293 136.637L169.954 145.647M168.652 148.35L164.313 157.359M163.012 160.062L158.673 169.072M157.371 171.775L153.032 180.785M151.731 183.487L147.392 192.497M146.09 195.2L141.751 204.21M140.45 206.913L136.111 215.922M134.809 218.625L130.47 227.635M129.169 230.338L124.83 239.347M124.366 238.382L124.366 228.382M124.366 225.382L124.366 215.382M124.366 212.382L124.366 202.382M124.366 199.382L124.366 189.382M124.366 186.382L124.366 176.382M124.366 173.382L124.366 163.382M124.366 160.382L124.366 150.382M124.366 147.382L124.366 137.382M124.366 134.382L124.366 124.382M124.366 121.382L124.366 111.382M124.366 108.382L124.366 98.3819M124.366 95.3819L124.366 85.3819M124.366 82.3819L124.366 72.3819M124.366 69.3819L124.366 59.3819M124.366 56.3819L124.366 46.3819M124.366 43.3819L124.366 33.3818M124.366 30.3819L124.366 20.3819M124.366 17.3818L124.366 15.6883L127.97 23.1722M129.271 25.8751L133.61 34.8848M134.912 37.5877L139.251 46.5974M140.552 49.3003L144.891 58.3099M146.193 61.0129L150.532 70.0225M151.833 72.7254L156.172 81.7351M157.474 84.438L161.813 93.4477M163.114 96.1506L167.453 105.16M168.755 107.863L173.094 116.873M174.395 119.576L178.734 128.586M180.036 131.288L184.375 140.298M185.676 143.001L190.015 152.011M191.317 154.714L195.656 163.723M196.957 166.426L201.296 175.436M202.598 178.139L206.936 187.149M208.238 189.851L212.577 198.861M213.879 201.564L218.217 210.574M219.519 213.277L221.826 218.067L218.165 215.147M215.819 213.277L208.001 207.042M205.655 205.171L197.837 198.936M195.492 197.066L187.673 190.831M185.328 188.961L177.509 182.726M175.164 180.855L167.346 174.62M165 172.75L157.182 166.515M154.836 164.644L147.018 158.41M144.672 156.539L136.854 150.304M134.509 148.434L126.69 142.199M124.345 140.328L116.527 134.093M114.181 132.223L106.363 125.988M104.017 124.118L96.1989 117.883M93.8534 116.012L86.0351 109.777M83.6896 107.907L75.8713 101.672M73.5258 99.8015L65.7075 93.5666M63.362 91.6962L55.5437 85.4613M53.1982 83.5908L46.2084 78.0166L47.2415 78.2524M50.1663 78.92L59.9156 81.1452M62.8404 81.8127L72.5896 84.0379M75.5144 84.7055L85.2637 86.9307M88.1885 87.5983L97.9378 89.8235M100.863 90.4911L110.612 92.7163M113.537 93.3838L123.286 95.609M126.211 96.2766L135.96 98.5018M138.885 99.1694L148.634 101.395M151.559 102.062L161.308 104.287M164.233 104.955L173.982 107.18M176.907 107.848L186.656 110.073M189.581 110.74L199.33 112.966M202.255 113.633L212.004 115.858M214.929 116.526L224.678 118.751M227.603 119.419L237.352 121.644M240.277 122.312L250.027 124.537M252.951 125.204L262.701 127.43M265.2 128L255.646 130.181"/></svg>`
      : `<?xml version="1.0" encoding="utf-8" ?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500" height="500"><path fill="none" stroke="black" stroke-width="1" stroke-miterlimit="10" d="M252.721 130.848L242.972 133.073M240.047 133.741L230.298 135.966M227.373 136.634L217.624 138.859M214.699 139.527L204.949 141.752M202.025 142.419L192.275 144.645M189.351 145.312L179.601 147.537M176.677 148.205L166.927 150.43M164.002 151.098L154.253 153.323M151.328 153.99L141.579 156.216M138.654 156.883L128.905 159.108M125.98 159.776L116.231 162.001M113.306 162.669L103.557 164.894M100.632 165.562L90.8829 167.787M87.9581 168.454L78.2088 170.68M75.2841 171.347L65.5348 173.572M62.61 174.24L52.8607 176.465M49.9359 177.133L46.2084 177.983L51.0374 174.132M53.3829 172.262L61.2013 166.027M63.5468 164.157L71.3651 157.922M73.7105 156.051L81.5289 149.816M83.8744 147.946L91.6927 141.711M94.0382 139.84L101.856 133.606M104.202 131.735L112.02 125.5M114.366 123.63L122.184 117.395M124.53 115.524L132.348 109.289M134.693 107.419L142.512 101.184M144.857 99.3136L152.676 93.0787M155.021 91.2082L162.839 84.9733M165.185 83.1029L173.003 76.868M175.349 74.9975L183.167 68.7626M185.512 66.8921L193.331 60.6572M195.676 58.7868L203.495 52.5519M205.84 50.6814L213.658 44.4465M216.004 42.576L221.826 37.933L220.718 40.2334M219.417 42.9363L215.078 51.946M213.776 54.6489L209.437 63.6586M208.136 66.3615L203.797 75.3711M202.495 78.0741L198.156 87.0837M196.855 89.7867L192.516 98.7963M191.214 101.499L186.875 110.509M185.574 113.212L181.235 122.222M179.933 124.924L175.594 133.934M174.293 136.637L169.954 145.647M168.652 148.35L164.313 157.359M163.012 160.062L158.673 169.072M157.371 171.775L153.032 180.785M151.731 183.487L147.392 192.497M146.09 195.2L141.751 204.21M140.45 206.913L136.111 215.922M134.809 218.625L130.47 227.635M129.169 230.338L124.83 239.347M124.366 238.382L124.366 228.382M124.366 225.382L124.366 215.382M124.366 212.382L124.366 202.382M124.366 199.382L124.366 189.382M124.366 186.382L124.366 176.382M124.366 173.382L124.366 163.382M124.366 160.382L124.366 150.382M124.366 147.382L124.366 137.382M124.366 134.382L124.366 124.382M124.366 121.382L124.366 111.382M124.366 108.382L124.366 98.3819M124.366 95.3819L124.366 85.3819M124.366 82.3819L124.366 72.3819M124.366 69.3819L124.366 59.3819M124.366 56.3819L124.366 46.3819M124.366 43.3819L124.366 33.3819M124.366 30.3819L124.366 20.3819M124.366 17.3819L124.366 15.6883L127.97 23.1722M129.271 25.8751L133.61 34.8848M134.912 37.5877L139.251 46.5974M140.552 49.3003L144.891 58.3099M146.193 61.0129L150.532 70.0225M151.833 72.7254L156.172 81.7351M157.474 84.438L161.813 93.4477M163.114 96.1506L167.453 105.16M168.755 107.863L173.094 116.873M174.395 119.576L178.734 128.586M180.036 131.288L184.375 140.298M185.676 143.001L190.015 152.011M191.317 154.714L195.656 163.723M196.957 166.426L201.296 175.436M202.598 178.139L206.936 187.149M208.238 189.851L212.577 198.861M213.879 201.564L218.217 210.574M219.519 213.277L221.826 218.067L218.165 215.147M215.819 213.277L208.001 207.042M205.655 205.171L197.837 198.936M195.492 197.066L187.673 190.831M185.328 188.961L177.509 182.726M175.164 180.855L167.346 174.62M165 172.75L157.182 166.515M154.836 164.644L147.018 158.41M144.672 156.539L136.854 150.304M134.509 148.434L126.69 142.199M124.345 140.328L116.527 134.093M114.181 132.223L106.363 125.988M104.017 124.118L96.1989 117.883M93.8534 116.012L86.0351 109.777M83.6896 107.907L75.8713 101.672M73.5258 99.8015L65.7075 93.5666M63.362 91.6962L55.5437 85.4613M53.1982 83.5908L46.2084 78.0166L47.2415 78.2524M50.1663 78.92L59.9156 81.1452M62.8404 81.8127L72.5896 84.0379M75.5144 84.7055L85.2637 86.9307M88.1885 87.5983L97.9378 89.8235M100.863 90.4911L110.612 92.7163M113.537 93.3838L123.286 95.609M126.211 96.2766L135.96 98.5018M138.885 99.1694L148.634 101.395M151.559 102.062L161.308 104.287M164.233 104.955L173.982 107.18M176.907 107.848L186.656 110.073M189.581 110.74L199.33 112.966M202.255 113.633L212.004 115.858M214.929 116.526L224.678 118.751M227.603 119.419L237.352 121.644M240.277 122.312L250.027 124.537M252.951 125.204L262.701 127.43M265.2 128L255.646 130.181"/></svg>`,
  )
})

function drawSimplePath() {
  const path = new Path2D()
  path.moveTo(0, 0)
  path.lineTo(10, 0)
  path.lineTo(10, 10)
  path.closePath()
  return path
}

test('Equals', (t) => {
  const p1 = drawSimplePath()
  const p2 = drawSimplePath()
  t.not(p1, p2)
  t.true(p1.equals(p2))
  t.true(p2.equals(p1))
  const blank = new Path2D()
  t.false(p1.equals(blank))
  t.false(p2.equals(blank))
  t.false(blank.equals(p1))
  t.false(blank.equals(p2))
})

function drawStar() {
  const path = new Path2D()
  const R = 115.2
  const C = 128.0
  path.moveTo(C + R + 22, C)
  for (let i = 1; i < 8; i++) {
    const a = 2.6927937 * i
    path.lineTo(C + R * Math.cos(a) + 22, C + R * Math.sin(a))
  }
  path.closePath()
  return path
}
